using System;
using System.Net;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Shapes;
using System.ComponentModel;
using System.Threading.Tasks;
using System.IO;
using System.Xml.Serialization;
using System.Collections.Generic;
using IdeaBlade.EntityModel;
using System.Collections.ObjectModel;

namespace Advarics.ControlServiceClient.ViewModel
{
    public class ViewModelBase : INotifyPropertyChanged
    {
        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        #region Private Members

        protected void SendPropertyChanged(string property)
        {
            if (this.PropertyChanged != null)
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(property));
            }
        }

        public void Refresh()
        {
            if (PropertyChanged != null)
                PropertyChanged(this, new PropertyChangedEventArgs(""));
        }

        #endregion

        private bool _IsBusy = false;

        public bool IsBusy
        {
            get { return _IsBusy; }
            set
            {
                _IsBusy = value;
                SendPropertyChanged("IsBusy");
            }
        }

        protected void ExecuteBackgroundProcess(Action action)
        {
            IsBusy = true;

            Task task = Task.Factory.StartNew(() => action()).ContinueWith((s) => this.IsBusy = false);
        }

        #region serialisierung


        public string SerializeToXml<T>(T instanceToSerialize)
        {
            string xml = string.Empty;
            using (StringWriter w = new StringWriter())
            {
                XmlSerializer s = new XmlSerializer(typeof(T));
                s.Serialize(w, instanceToSerialize);
                xml = w.ToString();
            }
            return xml;
        }


        public T DeSerializeFromXml<T>(string xml)
        {
            T returnObj = default(T);

            using (StringReader r = new StringReader(xml))
            {
                XmlSerializer s = new XmlSerializer(typeof(T));
                returnObj = (T)s.Deserialize(r);
            }

            return returnObj;
        }


        #endregion

    }
}
