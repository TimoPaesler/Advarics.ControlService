using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.IO;
using System.Text;

namespace Advarics.ControlService.Common
{
    public class Copy
    {
     


        public static void CopyDirectoryWithIncludedFiles(string dirCopySource, string dirCopyTarget,bool action)
        {
            // alle Unterverzeichnisse des aktuellen Verzeichnisses ermitteln
            string[] subDirectories = Directory.GetDirectories(dirCopySource);
            
            if (action == true)
            {
                List<string> subList = new List<string>();
                string[] subTargetDirectories = Directory.GetDirectories(dirCopyTarget);

                foreach (var item in subDirectories.ToList())
                {
                    if (subTargetDirectories.Where(x => x.Contains(item.Substring(item.LastIndexOf(@"\")))).Count() >= 1)
                    {
                        subList.Add(item);
                    }
                }
                subDirectories = subList.ToArray();
            }

            // Zielpfad erzeugen
            StringBuilder newTargetPath = new StringBuilder();
            {
                newTargetPath.Append(dirCopyTarget);
				if (action == false)
                {
                    newTargetPath.Append(dirCopySource.Substring(dirCopySource.LastIndexOf(@"\")));
                }
            }

            // wenn aktueller Ordner nicht existiert -> ersstellen
            if (!Directory.Exists(newTargetPath.ToString()))
                Directory.CreateDirectory(newTargetPath.ToString());

            // Unterverzeichnise durchlaufen und Funktion mit dazu gehörigen Zielpfad erneut aufrufen (Rekursion)
            foreach (string subDirectory in subDirectories)
            {
                string newDirectoryPath = subDirectory;

                // wenn ''/'' an letzter Stelle dann entfernen
                if (newDirectoryPath.LastIndexOf(@"\") == (newDirectoryPath.Length - 1))
                    newDirectoryPath = newDirectoryPath.Substring(0, newDirectoryPath.Length - 1);

                // rekursiever Aufruf
                CopyDirectoryWithIncludedFiles(newDirectoryPath, newTargetPath.ToString(),false);
            }

            // alle enthaltenden Dateien des aktuellen Verzeichnisses ermitteln
            string[] fileNames = Directory.GetFiles(dirCopySource);
            foreach (string fileSource in fileNames)
            {
                // Zielpfad + Dateiname
                StringBuilder fileTarget = new StringBuilder();
                {
                    fileTarget.Append(newTargetPath);
                    fileTarget.Append(fileSource.Substring(fileSource.LastIndexOf(@"\")));
                }

                // Datei kopieren, wenn schon vorhanden überschreiben
				if (IgnoreFileList.Retail(new FileInfo(fileSource)) == true)
				{
					try
					{
						
						File.Copy(fileSource, fileTarget.ToString(), true);
					}
					catch(Exception e)
					{

					}
				}
            }
           
        }

        public static void CopyVersionFile(string CopySource, string copyTarget,string fileName)
        {
            string[] subDirectories = Directory.GetDirectories(copyTarget);

            foreach (var item in subDirectories)
            {
                try
                {
                    File.Copy(CopySource, item + "\\" + fileName, true);
                }
                catch(Exception e)
                {

                }
            }
        }
    }
}